/* This is a scratch file */

// Add account and related contacts
//Account acct = new Account(
//        Name='SFDC',
//        Phone='(415)555-1212',
//        NumberOfEmployees=50,
//        BillingCity='San Francisco');
//insert acct;
//
//// Once account is inserted, the sObject has an ID
//ID acctId = acct.ID;
//
//// Add a contact to this account
//Contact con = new Contact(
//        FirstName='Carol',
//        LastName='Ruiz',
//        Phone='(415)555-1212',
//        Department='Wingo',
//        AccountId=acctId);
//insert con;
//
//// Add an account with no contact
//Account acct2 = new Account(
//        Name='The SFDC Query Man',
//        Phone='(310)555-1213',
//        NumberOfEmployees=50,
//        BillingCity='Los Angeles',
//        Description='Expert in wing technologies.');
//insert acct2;
//
//// SOSL example
//List<List<sObject>> searchList = [FIND 'Wingo OR SFDC' IN ALL FIELDS RETURNING Account(Name),
//    Contact(FirstName,LastName)];
//Account[] searchAccounts = (Account[])searchList[0];
//Contact[] searchContacts = (Contact[])searchList[1];
//
//System.debug('Found the following Accounts.');
//for (Account a: searchAccounts) {
//    System.debug(a.Name);
//}
//System.debug('Found the following contacts.');
//for (Contact c: searchContacts) {
//    System.debug(c.LastName + ', ' + c.FirstName);
//}

// Dynamic SOQL examples
// query 1 works but changing variable name can lead to runtime exception
// query2 works and will cause a compile time exception which may be preffered
//String caseStatus = 'New';
//String query = 'SELECT Id, CaseNumber FROM Case WHERE Status = :caseStatus';
//String query2 = 'SELECT Id, CaseNumber FROM Case WHERE Status = \'' + String.escapeSingleQuotes(caseStatus) + '\'';
//List<Case> results = Database.query(query);
//List<Case> results2 = Database.query(query2);
//System.debug(results);
//System.debug(results2);


//public class LimitWrapper {
//    String limitName;
//    Integer currentLimit;
//
//    public LimitWrapper(String limitName, Integer currentLimit) {
//        System.debug(limitName);
//        System.debug(currentLimit);
//        this.limitName = limitName;
//        this.currentLimit = currentLimit;
//    }
//}
//
//List<LimitWrapper> myLimits = new List<LimitWrapper>{};
//myLimits.add(new LimitWrapper('DMLStatements', Limits.getDMLStatements()));
//myLimits.add(new LimitWrapper('DMLStatements', Limits.getDMLStatements()));
//myLimits.add(new LimitWrapper('DMLStatements', Limits.getDMLStatements()));
//myLimits.add(new LimitWrapper('DMLStatements', Limits.getDMLStatements()));
//
//System.debug(myLimits);
//
//
//LimitWrapper t1 = new LimitWrapper('DMLStatements', Limits.getDMLStatements());
//System.debug('the number of DMLStatements is'+ t1);

//Integer myDMLStatements = Limits.getDMLStatements();
//System.debug(myDMLStatements);
//Integer myLimitDMLStatements = Limits.getLimitDMLStatements();
//System.debug(myLimitDMLStatements);
//Integer myAggQueries = Limits.getAggregateQueries();
//System.debug(myAggQueries);
//Integer myLimitAggQueries = Limits.getLimitAggregateQueries();
//System.debug(myLimitAggQueries);
//Integer myAsyncCalls = Limits.getAsyncCalls();
//System.debug(myAsyncCalls);
//Integer myLimitAsyncCalls = Limits.getLimitAsyncCalls();
//System.debug(myLimitAsyncCalls);
//Integer myCallouts = Limits.getCallOuts();
//System.debug(myCallouts);
//Integer myLimitCallouts = Limits.getLimitCallOuts();
//System.debug(myLimitCallouts);
//Integer myCpuTime = Limits.getCpuTime();
//System.debug(myCpuTime);
//Integer myLimitCpuTime = Limits.getLimitCpuTime();
//System.debug(myLimitCpuTime);
//Integer myDMLRows = Limits.getDMLRows();
//System.debug(myDMLRows);
//Integer myLimitDMLRows = Limits.getLimitDMLRows();
//System.debug(myLimitDMLRows);
//Integer myEmailInvocations = Limits.getEmailInvocations();
//System.debug(myEmailInvocations);
//Integer myLimitEmailInvocations = Limits.getLimitEmailInvocations();
//System.debug(myLimitEmailInvocations);
//Integer myFutureCalls = Limits.getFutureCalls();
//System.debug(myFutureCalls);
//Integer myLimitFutureCalls = Limits.getLimitFutureCalls();
//System.debug(myLimitFutureCalls);
//Integer myHeapSize = Limits.getHeapSize();
//System.debug(myHeapSize);
//Integer myLimitHeapSize = Limits.getLimitHeapSize();
//System.debug(myLimitHeapSize);
//Integer myMobilePushApexCalls = Limits.getMobilePushApexCalls();
//System.debug(myMobilePushApexCalls);
//Integer myLimitMobilePushApexCalls = Limits.getLimitMobilePushApexCalls();
//System.debug(myLimitMobilePushApexCalls);
//Integer myQueries = Limits.getQueries();
//System.debug(myQueries);
//Integer myLimitQueries = Limits.getLimitQueries();
//System.debug(myLimitQueries);
//Integer myQueryLocatorRows = Limits.getQueryLocatorRows();
//System.debug(myQueryLocatorRows);
//Integer myLimitQueryLocatorRows = Limits.getLimitQueryLocatorRows();
//System.debug(myLimitQueryLocatorRows);
//Integer myQueryRows = Limits.getQueryRows();
//System.debug(myQueryRows);
//Integer myLimitQueryRows = Limits.getLimitQueryRows();
//System.debug(myLimitQueryRows);
//Integer myQueueableJobs = Limits.getQueueableJobs();
//System.debug(myQueueableJobs);
//Integer myLimitQueueableJobs = Limits.getLimitQueueableJobs();
//System.debug(myLimitQueueableJobs);

//integer countContacts = [Select count() From Account];
//system.debug(countContacts);


String sessionID = UserInfo.getSessionId();
system.debug(sessionId);
//List<mySObjects> orgObjects = new List<mySObjects>();
List<String> objectNames = new List<String>();
Http http = new Http();
HttpRequest request = new HttpRequest();
request.setEndpoint('https://na35.salesforce.com/services/data/v39.0/sobjects/');
request.setMethod('GET');
request.setHeader('Authorization', 'Bearer '+sessionID);
HttpResponse response = http.send(request);

if (response.getStatusCode() == 200) {
    System.debug('success');
    //System.debug(response.getBody());
    Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
    List<Object> objects = (List<Object>) results.get('sobjects');
    system.debug(objects);
    for (Object myObject : objects) {
        Map<String, Object> result = (Map<String, Object>) myObject;
        //system.debug(result.get('name'));
        String objName = (String)result.get('name');
        //system.debug(objName);
        objectNames.add(objName);
    }
}

system.debug(objectNames.size());

//Integer i = Database.countquery('select count() from Account');
//System.debug(i);
// runs into 101 query limit
//for (String objname : objectNames) {
//    Integer i;
//    String s = 'select count() from '+ objname;
//    try {
//        i = Database.countquery(s);
//        system.debug(i);
//    } catch (System.QueryException e) {
//        system.debug(e);
//    }
//}

// runs into too many system call outs issue
//for (String objname : objectNames) {
//
//    Http http = new Http();
//    HttpRequest request = new HttpRequest();
//    String q = 'select+count()+from+'+objname;
//    String endpt = 'https://na35.salesforce.com/services/data/v39.0/query/?q=' + q;
//    request.setEndpoint(endpt);
//    request.setMethod('GET');
//    request.setHeader('Authorization', 'Bearer '+sessionID);
//    HttpResponse response = http.send(request);
//    if (response.getStatusCode() == 200) {
//        system.debug('success');
//        system.debug(response);
//    } else {
//        system.debug('fail');
//    }
//}

/*String sessionID = UserInfo.getSessionId();
system.debug(sessionId);
List<mySObjects> orgObjects = new List<mySObjects>();
List<String> objectNames = new List<String>();
Http http = new Http();
HttpRequest request = new HttpRequest();
//request.setEndpoint('https://na35.salesforce.com/services/data/v37.0/limits/');
//request.setEndpoint('https://na35.salesforce.com/services/data/v39.0/sobjects/Account/describe/');
//request.setEndpoint('https://na35.salesforce.com/services/data/v39.0/licensing/');
//request.setEndpoint('https://na35.salesforce.com/services/data/v39.0/sobjects/Account');
request.setEndpoint('https://na35.salesforce.com/services/data/v39.0/sobjects/');
request.setMethod('GET');
request.setHeader('Authorization', 'Bearer '+sessionID);
//request.setHeader('X-Pretty-Print','1');
//request.setHeader('Authorization: Bearer <token>');
HttpResponse response = http.send(request);
if (response.getStatusCode() == 200) {
    System.debug('success');
    System.debug(response.getBody());
    Map<String, mySObjects> results = (Map<String, mySObjects>) JSON.deserializeUntyped(response.getBody());
    orgObjects = (List<mySObjects>)results.get('sobjects');
    for (mySObjects orgObject: orgObjects) {
		system.debug(orgObject);
    }
}*/